showticklabels = TRUE,
domain = c(0, 0.85),
title = "Reduction of Dairy Farms by Range (thousands) (2006->2017)"),
xaxis = list(tickfont = list(size = 12,
color = "black"),
zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Range of property size (hectares). *N.I (Not Informed)"),
font = list(size = 11))
c <- plot_ly(y = ((properties_2017_2 - properties_2006_2) / properties_2006_2) * 100,
x = reorder(properties_range_2, sequence_2),
type = 'bar',
orientation = 'v',
marker = list(color = 'rgba(250, 0, 50, 0.6)',
line = list(color = 'rgba(0, 0, 0, 1.0)',
width = 1))) %>%
layout(showlegend = FALSE,
annotations = list(x = reorder(properties_range_2, sequence_2),
y = ((properties_2017_2 - properties_2006_2) /properties_2006_2) * 100,
text = paste(round(((properties_2017_2 - properties_2006_2) / properties_2006_2) * 100, 0), '%'),font = list(family = 'Arial',
size = 15,
color = 'rgb(0, 0, 0)'),
showarrow = TRUE,
xref = "x2",
yref = "y2",
ax = 10,
ay = 20),
yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain = c(0, 0.85),
title = "Percentual Reduction of Dairy Farms by Range (%)(2006->2017)"),
xaxis = list(tickfont = list(size = 12,
color = "black"),
zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Range of property size (hectares). *N.I (Not Informed)"),
font = list(size = 11))
subplot(b, c, titleX = TRUE, titleY = TRUE, margin = c(0.035,0,0,0.8)) %>%
layout(title = "Brazilian Dairy Properties Variation between 2006 and 2017")
plot_ly(x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = reorder(properties_range, sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(128, 0, 128, 0.6)',
line = list(color = 'rgba(102, 102, 102, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Percentual Variation of Dairy Farms (%)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = properties_range,
text = paste(round(((properties_2017 - properties_2006) / properties_2006) * 100, 2), '%'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
plot_ly(x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = reorder(properties_range, sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(128, 0, 128, 0.6)',
line = list(color = 'rgba(102, 102, 102, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Percentual Variation of Dairy Farms (%)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = properties_range,
text = paste(round(((properties_2017 - properties_2006) / properties_2006) * 100, 2), '%'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
milk_production <- read.csv2('../spreadsheet/table74.csv', skip = 3, nrows = 3)
milk_production <- milk_production[-1,-1]
colnames(milk_production) <- gsub("X", '', colnames(milk_production))
years <- as.integer(colnames(milk_production))
brazilian_milk <- as.numeric(as.character(unlist(milk_production[1,], use.names=FALSE)))
rs_milk <- as.numeric(as.character(unlist(milk_production[2,], use.names=FALSE)))
data <- data.frame(brazilian_milk, rs_milk, years)
l <- lm(data$brazilian_milk / 1000000 ~ years, data = data)
l2 <- lm(data$rs_milk / 1000000 ~ years, data = data)
if(!require(plotly)) install.packages('plotly')
library(plotly)
font1 <- list(family = "Arial, sans-serif", size = 22, color = "black")
font2 <- list(size = 16, color = "black")
labelx <- list(title = "Years", titlefont = font1, showticklabels = TRUE, tickfont = font2, exponentformat = "E")
labely <- list(title = "Milk Production (Billions of liters)", titlefont = font1, showticklabels = TRUE, tickfont = font2, exponentformat = "E")
plot_ly(data, x = ~years) %>%
add_trace(y = ~brazilian_milk / 1000000,
type = "bar",
name = 'Brazil',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(0,0,0)',
width = 1.5))) %>%
add_trace(y = ~rs_milk / 1000000,
type = "bar",
name = 'RS',
marker = list(color = 'rgb(225,58,58)',
line = list(color = 'rgb(0,0,0)',
width = 1.5))) %>%
add_lines(y = fitted(l),
name = 'Brazil',
line = list(color = 'rgb(0,0,255)',
width = 3)) %>%
add_lines(y = fitted(l2),
name = 'RS state',
line = list(color = 'rgb(255,0,0)',
width = 3)) %>%
layout(xaxis = labelx, yaxis = labely)
if(!require(tidyverse)) install.packages('tidyverse')
library(tidyverse)
milk_production_states <- read.csv2('../spreadsheet/table74_brazil.csv', skip = 3, nrows = 31, stringsAsFactors = FALSE, encoding = "UTF-8")
milk_production_states <- milk_production_states[-(1:2),]
milk_production_states <- milk_production_states[-29,]
colnames(milk_production_states) <- gsub("X", '', colnames(milk_production_states))
colnames(milk_production_states)[1] <- "Brazilian_States"
for(i in 2:ncol(milk_production_states)){
milk_production_states[,i] <- gsub("[...]", '0', milk_production_states[,i])
milk_production_states[,i] <- as.numeric(as.character(unlist(milk_production_states[,i])))
}
milk_production_states <- milk_production_states[-20,]
milk_production_states
Regions <- c(rep("N", 7), rep("NE", 9), rep("SE", 4), rep("S", 3), rep("MW", 4))
milk_production_states <- cbind(milk_production_states, Regions)
milk_production_states
milk_production_states <- milk_production_states %>%
gather(year, value, 2:45)
milk_production_states$year <- as.numeric(milk_production_states$year)
milk_production_states_1 <- milk_production_states %>%
group_by(year) %>%
mutate(rank = rank(-value),
Value_lbl = paste0(" ", round((value * 1000) / 1000000000, 2))) %>%
filter(rank <= 10) %>%
ungroup()
if(!require(gganimate)) install.packages('gganimate')
library(gganimate)
if(!require(gifski)) install.packages('gifski')
library(gifski)
properties_2006 <- read.csv2('../spreadsheet/table933.csv',skip = 5, nrows = 1)
properties_2017 <- read.csv2('../spreadsheet/table6783.csv',skip = 5, nrows = 1)
properties_2006 <- properties_2006[,-(1:2)]
properties_2017 <- properties_2017[,-1]
properties_2006 <- as.numeric(as.character(unlist(properties_2006[1,])))
properties_2017 <- as.numeric(as.character(unlist(properties_2017[1,])))
NROW(properties_2006) == NROW(properties_2017)
properties_2017[17] <- properties_2017[17] + properties_2017[18]
properties_2017 <- properties_2017[-18]
properties_range <- c("0-0,1", "0,1-0,2", "0,2-0,5", "0,5-1", "1-2", "2-3", "3-4", "4-5", "5-10", "10-20", "20-50", "50-100", "100-200", "200-500", "500-1000", "1000-2500", "2500+", "NA")
sequence <- seq(1,18)
plot_ly(x = (properties_2017-properties_2006)/1000,
y = reorder(properties_range,sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(50, 171, 96, 0.6)',
line = list(color = 'rgba(50, 171, 96, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Variation in Number of Dairy Farms (thousands)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = (properties_2017 - properties_2006) / 1000,
y = properties_range,
text = paste(round((properties_2017-properties_2006)/1000, 0), 'k'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
plot_ly(x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = reorder(properties_range, sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(128, 0, 128, 0.6)',
line = list(color = 'rgba(102, 102, 102, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Percentual Variation of Dairy Farms (%)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = properties_range,
text = paste(round(((properties_2017 - properties_2006) / properties_2006) * 100, 2), '%'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
plot_ly(x = (properties_2017-properties_2006)/1000,
y = reorder(properties_range,sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(50, 171, 96, 0.6)',
line = list(color = 'rgba(50, 171, 96, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Variation in Number of Dairy Farms (thousands)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = (properties_2017 - properties_2006) / 1000,
y = properties_range,
text = paste(round((properties_2017-properties_2006)/1000, 0), 'k'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
library(tidyverse)
plot_ly(x = (properties_2017-properties_2006)/1000,
y = reorder(properties_range,sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(50, 171, 96, 0.6)',
line = list(color = 'rgba(50, 171, 96, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Variation in Number of Dairy Farms (thousands)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = (properties_2017 - properties_2006) / 1000,
y = properties_range,
text = paste(round((properties_2017-properties_2006)/1000, 0), 'k'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
library(plotly)
plot_ly(x = (properties_2017-properties_2006)/1000,
y = reorder(properties_range,sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(50, 171, 96, 0.6)',
line = list(color = 'rgba(50, 171, 96, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Variation in Number of Dairy Farms (thousands)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = (properties_2017 - properties_2006) / 1000,
y = properties_range,
text = paste(round((properties_2017-properties_2006)/1000, 0), 'k'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
plot_ly(x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = reorder(properties_range, sequence),
type = 'bar',
orientation = 'h',
marker = list(color = 'rgba(128, 0, 128, 0.6)',
line = list(color = 'rgba(102, 102, 102, 1.0)',
width = 1))) %>%
layout(yaxis = list(showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
domain= c(0, 0.85),
title = "Range of property size (hectares)"),
xaxis = list(zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE,
title = "Percentual Variation of Dairy Farms (%)"),
font = list(size = 8)) %>%
add_annotations(xref = 'x1',
yref = 'y',
x = ((properties_2017 - properties_2006) / properties_2006) * 100,
y = properties_range,
text = paste(round(((properties_2017 - properties_2006) / properties_2006) * 100, 2), '%'),
font = list(family = 'Arial',
size = 8,
color = 'rgb(0, 0, 0)'),
showarrow = FALSE)
library(ggplot2)
milk_production_rs_cities <- read.csv2('../spreadsheet/table74_rs_cities.csv', skip = 3, stringsAsFactors = FALSE, encoding = "UTF-8")
milk_production_rs_cities <- milk_production_rs_cities[-(1:2),]
milk_production_rs_cities <- milk_production_rs_cities[-(498:510),]
colnames(milk_production_rs_cities) <- gsub("X", '', colnames(milk_production_rs_cities))
milk_production_rs_cities[, 1] <- gsub(" [(]RS[)]","",milk_production_rs_cities[, 1])
colnames(milk_production_rs_cities)[1] <- "Cities"
for(i in 2:ncol(milk_production_rs_cities)){
milk_production_rs_cities[, i] <- gsub("[...]", "0", milk_production_rs_cities[, i])
milk_production_rs_cities[, i] <- gsub("[-]", "0", milk_production_rs_cities[, i])
milk_production_rs_cities[, i] <- as.numeric(as.character(unlist(milk_production_rs_cities[, i])))
}
if (!require(rgdal)) install.packages("rgdal", repos = "http://cran.us.r-project.org")
require(rgdal)
if (!require(RColorBrewer)) install.packages("rgdal", repos = "http://cran.us.r-project.org")
require(RColorBrewer)
if (!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
require(dplyr)
if (!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
require(ggplot2)
if (!require(gganimate)) install.packages("gganimate", repos = "http://cran.us.r-project.org")
require(gganimate)
if (!require(gifski)) install.packages("gifski")
require(gifski)
if(!require(transformr)) install.packages('transformr')
require(transformr)
shape_rs <- readOGR("../shape/Municipios_IBGE.shp", "Municipios_IBGE", use_iconv = TRUE, encoding = "UTF-8")
shape_rs@data$Label_N[!shape_rs@data$Label_N %in% milk_production_rs_cities$Cities]
milk_production_rs_cities[239,1] <- "Maçambara"
milk_production_rs_cities[342,1] <- "Restinga Seca"
milk_production_rs_cities[369,1] <- "Santana do Livramento"
milk_production_rs_cities[483,1] <- "Vespasiano Correa"
milk_production_rs_cities[496,1] <- "Westfalia"
milk_production_rs_cities<-milk_production_rs_cities[order(milk_production_rs_cities$Cities),]
for(j in 2:ncol(milk_production_rs_cities)){
milk_production_rs_cities[,j] <- as.numeric(milk_production_rs_cities[,j])/1000
}
milk_production_rs_cities$id <- c(1:nrow(milk_production_rs_cities))
milk_production_rs_cities <- reshape::melt(milk_production_rs_cities, id.vars = c("Cities","id"))
shape_rs@data$id <- c(1:nrow(shape_rs@data))
shapefile_df <- fortify(shape_rs, region = 'id') %>% mutate(id = as.numeric(id))
shapefile_RS <- sp::merge(shapefile_df, shape_rs@data,by="id")
map_data <- shapefile_RS %>% left_join(milk_production_rs_cities, by = c("Label_N" = "Cities"))
colnames(map_data)[20] <- "year"
colnames(map_data)[21] <- "milk_production"
map_data <- map_data[,-(14:17)]
map_data <- map_data[,-(8:11)]
map_data[is.na(map_data$milk_production),]
map_data$year <- as.numeric(as.character(map_data$year))
quantile( milk_production_rs_cities$value[milk_production_rs_cities$variable==2017], p = (0:5)/5 )
map_data$cat <- ifelse(map_data$value >= 14.063, 8,
ifelse(map_data$value >= 8, 7,
ifelse(map_data$value >= 4.212, 6,
ifelse(map_data$value >= 1.119, 5,
ifelse(map_data$value >= 0, 4, 4)))))
map_data$cat <- factor(map_data$cat, levels = c(8:4), labels = c("14.60 - 62.91", "8.01 - 14.60", "4.21 - 8.00", "1.12 - 4.21", "0.00 - 1.12"))
p <- ggplot() +
geom_polygon(data = map_data,
aes(fill = cat,
x = long,
y = lat,
group = group),
color = "black",
size = 0.1) +
coord_equal() +
theme(legend.position = "bottom",
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
plot.title = element_text(size = 24)) +
labs(x = NULL,
y = NULL,
title = "Milk Production in {round(frame_time,0)} - Rio Grande do Sul - Brazil ") +
scale_fill_manual(values = rev(colorRampPalette(brewer.pal(5, "Greens"))(5)),
name = "Milk Production (Millions of Liters) - Source: IBGE, 2019.",
drop = FALSE,
guide = guide_legend(direction = "horizontal",
keyheight = unit(4, units = "mm"),keywidth = unit(40, units = "mm"),
title.position = 'top',
title.hjust = 0.5,
label.hjust = 0.5,
nrow = 1,
byrow = T,
reverse = T,
label.position = "bottom")) +
transition_time(year)
animate(p, nframes = 22, fps = 10, width = 1700, height = 1200, renderer = gifski_renderer("gganimsss.gif")) +  ease_aes('cubic-in-out')
View(map_data)
milk_production_rs_cities <- read.csv2('../spreadsheet/table74_rs_cities.csv', skip = 3, stringsAsFactors = FALSE, encoding = "UTF-8")
milk_production_rs_cities <- milk_production_rs_cities[-(1:2),]
milk_production_rs_cities <- milk_production_rs_cities[-(498:510),]
colnames(milk_production_rs_cities) <- gsub("X", '', colnames(milk_production_rs_cities))
milk_production_rs_cities[, 1] <- gsub(" [(]RS[)]","",milk_production_rs_cities[, 1])
colnames(milk_production_rs_cities)[1] <- "Cities"
for(i in 2:ncol(milk_production_rs_cities)){
milk_production_rs_cities[, i] <- gsub("[...]", "0", milk_production_rs_cities[, i])
milk_production_rs_cities[, i] <- gsub("[-]", "0", milk_production_rs_cities[, i])
milk_production_rs_cities[, i] <- as.numeric(as.character(unlist(milk_production_rs_cities[, i])))
}
if (!require(rgdal)) install.packages("rgdal", repos = "http://cran.us.r-project.org")
require(rgdal)
if (!require(RColorBrewer)) install.packages("rgdal", repos = "http://cran.us.r-project.org")
require(RColorBrewer)
if (!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
require(dplyr)
if (!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
require(ggplot2)
if (!require(gganimate)) install.packages("gganimate", repos = "http://cran.us.r-project.org")
require(gganimate)
if (!require(gifski)) install.packages("gifski")
require(gifski)
if(!require(transformr)) install.packages('transformr')
require(transformr)
shape_rs <- readOGR("../shape/Municipios_IBGE.shp", "Municipios_IBGE", use_iconv = TRUE, encoding = "UTF-8")
shape_rs@data$Label_N[!shape_rs@data$Label_N %in% milk_production_rs_cities$Cities]
milk_production_rs_cities[239,1] <- "Maçambara"
milk_production_rs_cities[342,1] <- "Restinga Seca"
milk_production_rs_cities[369,1] <- "Santana do Livramento"
milk_production_rs_cities[483,1] <- "Vespasiano Correa"
milk_production_rs_cities[496,1] <- "Westfalia"
milk_production_rs_cities<-milk_production_rs_cities[order(milk_production_rs_cities$Cities),]
for(j in 2:ncol(milk_production_rs_cities)){
milk_production_rs_cities[,j] <- as.numeric(milk_production_rs_cities[,j])/1000
}
milk_production_rs_cities$id <- c(1:nrow(milk_production_rs_cities))
milk_production_rs_cities <- reshape::melt(milk_production_rs_cities, id.vars = c("Cities","id"))
shape_rs@data$id <- c(1:nrow(shape_rs@data))
shapefile_df <- fortify(shape_rs, region = 'id') %>% mutate(id = as.numeric(id))
shapefile_RS <- sp::merge(shapefile_df, shape_rs@data,by="id")
map_data <- shapefile_RS %>% left_join(milk_production_rs_cities, by = c("Label_N" = "Cities"))
colnames(map_data)[20] <- "year"
colnames(map_data)[21] <- "milk_production"
map_data <- map_data[,-(14:17)]
map_data <- map_data[,-(8:11)]
map_data[is.na(map_data$milk_production),]
map_data$year <- as.numeric(as.character(map_data$year))
quantile( milk_production_rs_cities$value[milk_production_rs_cities$variable==2017], p = (0:5)/5 )
map_data$cat <- ifelse(map_data$milk_production >= 14.063, 8,
ifelse(map_data$milk_production >= 8, 7,
ifelse(map_data$milk_production >= 4.212, 6,
ifelse(map_data$milk_production >= 1.119, 5,
ifelse(map_data$milk_production >= 0, 4, 4)))))
map_data$cat <- factor(map_data$cat, levels = c(8:4), labels = c("14.60 - 62.91", "8.01 - 14.60", "4.21 - 8.00", "1.12 - 4.21", "0.00 - 1.12"))
p <- ggplot() +
geom_polygon(data = map_data,
aes(fill = cat,
x = long,
y = lat,
group = group),
color = "black",
size = 0.1) +
coord_equal() +
theme(legend.position = "bottom",
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
plot.title = element_text(size = 24)) +
labs(x = NULL,
y = NULL,
title = "Milk Production in {round(frame_time,0)} - Rio Grande do Sul - Brazil ") +
scale_fill_manual(values = rev(colorRampPalette(brewer.pal(5, "Greens"))(5)),
name = "Milk Production (Millions of Liters) - Source: IBGE, 2019.",
drop = FALSE,
guide = guide_legend(direction = "horizontal",
keyheight = unit(4, units = "mm"),keywidth = unit(40, units = "mm"),
title.position = 'top',
title.hjust = 0.5,
label.hjust = 0.5,
nrow = 1,
byrow = T,
reverse = T,
label.position = "bottom")) +
transition_time(year)
animate(p, nframes = 22, fps = 10, width = 1700, height = 1200, renderer = gifski_renderer("gganimsss.gif")) +  ease_aes('cubic-in-out')
animate(p, nframes = 220, fps = 10, width = 1500, height = 1200, renderer = gifski_renderer("gganimsss.gif")) +  ease_aes('cubic-in-out')
